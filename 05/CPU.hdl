// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

//To determine the A or C type of instruction


Mux16(a=instruction,b=ALUoutA,sel=instruction[15],out=outmuxdec);



//Load enable for A register 
//load when inst is C type and dest is A or The instruction is A //type

And(a=instruction[15],b=instruction[5],out=outand);
Not(in=instruction[15],out=notMSB);
Or(a=notMSB,b=outand,out=ldlogicA);


//A register

ARegister(in=outmuxdec,out=outregAmux,out=outregApc,out[0..14]=addressM,load=ldlogicA);

//A or M select Mux


Mux16(a=outregAmux,b=inM,out=outAorM,sel=instruction[12]);


//Load logic for register D
//Load if instruction is C type and dest is D

And(a=instruction[15],b=instruction[4],out=ldlogicD);




//Register D

DRegister(in=ALUoutD,out=outregD,load=ldlogicD);



//ALU
//ALU control logic is to connect comp bits to ALU control bits


ALU(x=outregD,y=outAorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUoutA,out=ALUoutD,zr=zrALU,zr=zrALUa,zr=zrALUb,zr=zrALUc,ng=ngALU,ng=ngALUa,ng=ngALUc);



//Determine when to jump

Or(a=zrALU,b=ngALU,out=notjgt);
Not(in=notjgt,out=jgt);

Not(in=ngALU,out=notng,out=jge);
And(a=zrALUa,b=notng,out=jeq);

Not(in=zrALUb,out=notzr,out=jne);
And(a=notzr,b=ngALUa,out=jlt);
Xor(a=zrALUc,b=ngALUc,out=jle);






Mux8Way(a=false,b=jgt,c=jeq,d=jge,e=jlt,f=jne,g=jle,h=true,sel=instruction[0..2],out=outjmpmux);
//jump only if its a C instruction
And(a=instruction[15],b=outjmpmux,out=dojmp,out=ldlogicpc);

Not(in=dojmp,out=inclogic);

//writeM
And(a=instruction[3],b=instruction[15], out=writeM);
//,out=writeM1

//Mux16(sel=writeM1,a=inM, b=outALU, out=outM);



//A register value is addressM
//addressM=outregAadd[0..14];


//Program Counter

PC(in=outregApc,out[0..14]=pc,reset=reset,inc=inclogic,load=ldlogicpc);


//outpc[0..14]=pc;

















}

