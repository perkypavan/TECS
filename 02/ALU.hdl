// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:

//zx and nx part

Mux16(a=x,b=false,sel=zx,out=o1x);
And16(a=o1x,b=true,out=o2x);
Not16(in=o2x,out=o3x);
Mux16(a=o2x,b=o3x,sel=nx,out=outznx);


//zy and ny part similar to above module

Mux16(a=y,b=false,sel=zy,out=o1y);
And16(a=o1y,b=true,out=o2y);
Not16(in=o2y,out=o3y);
Mux16(a=o2y,b=o3y,sel=ny,out=outzny);

//function select part addition and anding


Add16(a=outznx,b=outzny,out=outadd);
And16(a=outznx,b=outzny,out=outand);


Mux16(a=outand,b=outadd,sel=f,out=outfn);

//output negation part

Not16(in=outfn,out=notoutfn);
Mux16(a=outfn,b=notoutfn,sel=no,out=out,out=tempout,out[15]=ng);

//zr and ng part

//zr part

Or16Way(in=tempout,out=notzr);
Not(in=notzr, out=zr);


 //Or16Way(in=out,out=notzr);
 

//Or8Way(in[0]=out[0],out=outor81);
//Or8Way(in=out[8..15],out=outor82);
//Or(a=outor81,b=outor82,out=outor);
//Not(in=outor,out=zr);

//ng part

//And(a=out[15],b=true,out=ng);




}